import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
public class Games {

	//Delay method 
	public static void wait(int ms)
	{
	    try
	    {
	        Thread.sleep(ms);
	    }
	    catch(InterruptedException ex)
	    {
	        Thread.currentThread().interrupt();
	    }
	}

	// Blackjack ***********************************************************************************************
	//gets value of card from random card
	public static int value(Integer num){
		//coverts 1-52 into 1-13 (for each suit)
		while (num > 13){

			num = (num - 13);

		}
		//Value of each card
		int[] cards = {11,2,3,4,5,6,7,8,9,10,10,10,10};
		//return card value
		return (cards[num-1]);
	}

	//gets face of card from random value
	public static String convert(Integer num){
		//Cards display face
		String[] cards = {"A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"};
		//converting 1-52 to 1-13 (4 of each card, 1 per face)
		while (num > 13){
			
			num = (num - 13);
		
		}
		// return display face of card
		String card = cards[num - 1];
		return card;
	}

	//Generates random card without duplicating
	public static int draw(ArrayList<Integer> drawn){
		// initate randomizer 
		Random rand = new Random();
		int card;
		
		//random number from 1-52
		card = rand.nextInt(52)+1;

		//Checks if new card has already been played, and if so, is redrawn. This means that there are no duplicate cards played. 
		//Example : Only 4 aces can exist in a single game
		while (drawn.contains(card) == true){

			card = rand.nextInt(52)+1;	
		}
		//return value of card
		System.out.println();
		return(card);
	}

	//Blackjack main game
	public static void turn(){
		// initiate scanner
		Scanner scan =  new Scanner(System.in);
		
		//declaring variables
		Integer value;
		int choice = 1;
		int loss = 0;
		int turn = 0;
		ArrayList<Integer> drawn = new ArrayList<Integer>();
		ArrayList<String> phand = new ArrayList<String>();
		ArrayList<String> dhand = new ArrayList<String>();

		int total = 0;
		int dtotal = 0;
		
		//dealer intial draw
		for (int i=0;i!=2;i++){
			/* 
			 * value = value of new card drawn
			 * drawn = cards played
			 * dhand = dealers hand (display)
			 * hand = players hand (display)
			 * dtotal = total value of dealers hand
			 * total = total value of players hand
			 */
			value = (draw(drawn));
			drawn.add(value);
			dhand.add(convert(value));
			dtotal = (dtotal + value(value));
		}
		

		//player inital draw (first card) (player requires 2 cards at beginning of game)

		value = (draw(drawn));
		drawn.add(value);
		phand.add(convert(value));
		total = (total + value(value));

		//player turn	(loops while player chooses to draw another card)
		while (choice == 1){
			//turn counter
			turn++;
			//display dealers hand
			System.out.println("Turn "+ turn);
			System.out.println("	Dealers Hand");
			System.out.println("	[?, "+(dhand.get(1))+"]");
			System.out.println("	Hand Total = ?");
			System.out.println("");
			//display players hand + draw second card
			System.out.print("	Players Hand");
			value = (draw(drawn));
			drawn.add(value);
			phand.add(convert(value));
			System.out.println("	" + phand);
			total = (total + value(value));
			System.out.println("	Hand Total = "+total);

			//check if player had gone over 21, and if so player looses
			if (total > 21){
				
				loss = 1;
				choice = 0;
			//if player has not lost, ask if they want to draw again
			}else{

				choice=scan.nextInt();
			}
		
		}
		// if player lost, display player bust
		if (total > 21){

			System.out.println("");
			System.out.println("Player Bust!");

		}else{
			//if player has not lost, initiate dealers turn
			System.out.println("");
			System.out.println("Dealers Turn + Hand Reveal");
			System.out.println("	Dealers Hand");
			System.out.println("	" + dhand);
			System.out.println("	Hand total = " + dtotal);
			System.out.println("");
			System.out.println("	Players Hand");
			System.out.println("	" + phand);
			System.out.println("	Hand Total = "+total);
			//1.5 second delay between each of the dealers turns
			wait(1500);
		}
		
		if (loss == 0){
			// dealer draws till they loose, hit 18, or beat the player
			while (dtotal < 17&&dtotal<total){
				// dealers turn
				value = (draw(drawn));
				drawn.add(value);
				dhand.add(convert(value));
				dtotal = (dtotal + value(value));
				turn = 0;
				turn++;
				System.out.println("Turn " + turn);
				System.out.println("	Dealers Hand");
				System.out.println("	" + dhand);
				System.out.println("	Hand total = " + dtotal);
				System.out.println("");
				System.out.println("	Players Hand");
				System.out.println("	" + phand);
				System.out.println("	Hand Total = "+total);
				wait(1500);
			}

		}
		//check if dealers hand is higher value than players hand
		if (dtotal > total){
			// if dealer over 21 then dealer busts
			if (dtotal > 21){

				System.out.println("Dealer Bust! Player Wins!");

			}else{
				// dealer wins if not over 21
				System.out.println("Dealer Wins!");

			}

		}else{
			// if dealers hand same as player than tie
			if (dtotal==total){

				System.out.println("Tie!");

			}else{
				// if player hand not over 21, player wins
				if (total > 21){

				}else{

					System.out.println("Player Wins!");

				}

			}

		}

	}

// Mastermind ***********************************************************************************************************


	
	// masterming help menu (shows how to understand the games output, and how to play)
	static void help(){
		Scanner scan = new Scanner(System.in);
		@SuppressWarnings("unused")
		String cont;
		System.out.println("After entering your guess, you will see something simlar to this:");
		System.out.println("Turn 1");
		System.out.println("	Guess: [3,5,6,1]	Result: [2,1,1,0]");
		System.out.println("The guess section shows your guesses");
		System.out.println("The result section shows the results of your guess");
		System.out.println("The result section can be read as follows:");
		System.out.println("	[2] = One of the digits in your guess is in the code and in the correct position");
		System.out.println("	[1] = One of the digits in your guess is in the code, but not the correct position");
		System.out.println("	[0] = One of the digits in your guess not located inside of the code");
		
		System.out.println("Press Enter To Continue . . . .");
		cont = scan.nextLine();
		
		System.out.println("Example: ");
		System.out.println("	Guess: [3,5,6,1]	Result: [2,2,1,0]");
		System.out.println("");
		System.out.println("Based off of the results, we know that 2 of the numbers guessed are correct, ");
		System.out.println("1 is not in the correct position, and 1 is incorrect. However, do note that ");
		System.out.println("the order of the results does not coorespond to the order of numbers guessed.");
		System.out.println("results will always be displayed in the following format:");
		System.out.println("");
		System.out.println("Correct position [2] -> In code but inccorrect position [1] -> incorrect guess [0]");
		System.out.println("*Also note that numbers can be repeated inside the code (1111 is a possible code)");
		System.out.println("Press Enter To Continue . . . .");
		cont = scan.nextLine();
		System.out.println("Input");
		System.out.println("when entering your guess, keep in mind that codes can only contain numbers 1 to 6.");
		System.out.println("Press Enter To Continue . . . .");
		cont = scan.nextLine();
		
		
		main(null);
	}

	// Method to display past guesses, most recent guess, and the result of your guesses
	static void gui(ArrayList<ArrayList<Integer>> pastres, ArrayList<ArrayList<Integer>> pastguess, int turns){

		// outputs each turn 1 at a time, using turn counter to display correct number of turns)
		for (int i = 0; i<turns;i++){
			System.out.println("Turn " + (i + 1));
			System.out.print("	Guess :");
			System.out.print(pastguess.get(i));
			System.out.print("	Result :");
			System.out.println(pastres.get(i));


		}

		
	}
	
	//Method to get result of players guess, and checking if the guess is same as the code
	static ArrayList<Integer> checker(int length, ArrayList<Integer> code, int[] bot){

		List<Integer> codetemp = new ArrayList<Integer>(code);

		ArrayList<Integer> result = new ArrayList<Integer>();

		// checking if number is in exact spot
		for (int i = 1; i < (length + 1); i++) {

			if (codetemp.get(i - 1) == bot[i - 1]) {

			//System.out.println("2");
				codetemp.set(codetemp.indexOf(bot[i - 1]), 10);
				bot[i-1] = 9;
				result.add(2);
				
			}
		}
		// checks if number is in the code
		for (int i = 1; i < (length + 1); i++) {

			if (codetemp.contains(bot[i - 1])) {
				
				codetemp.set(codetemp.indexOf(bot[i - 1]), 10);
				bot[i-1] = 9;
				result.add(1);
				
			}
		}

		//after all numbers checked, add zero for every incorrect number
		while (result.size() != codetemp.size()) {

			result.add(0);

		}
		// sort the array list so information is not ordered in respect to guess order
		Collections.sort(result, Collections.reverseOrder());


		return (result);
	}

	// main mastermind game (intially just custom gamemode, but now acts as both standard and custom)
	static void custom(ArrayList<Integer> code, int length, int turns) { 
		//initate scanner
		Scanner scan = new Scanner(System.in);
		//declaring variables
		int sum = 0;
		int turn = 0;
		int pin = 0;
		int cont = 0;
		@SuppressWarnings("unused")
		String enter;
		@SuppressWarnings("unused")
		String check;
		
		// array lists tracking previous guesses and results
		ArrayList<ArrayList<Integer>> pastres = new ArrayList<ArrayList<Integer>>();
		ArrayList<ArrayList<Integer>> pastguess = new ArrayList<ArrayList<Integer>>();
	
		//while guess is not the same as code, and player still has turns remaining loop
		while (sum != (length) && turn != turns) {
			
			turn ++;

			sum = 0;

			int[] input = new int[length];

			System.out.println("");
			System.out.println("Input guess:");
			
			//get player guess
			pin = scan.nextInt();
			
			// if guess is not same length as code then ask again for input
			if (String.valueOf(pin).length() < length ||String.valueOf(pin).length() > length){
			
				while (cont != 1){
					if (String.valueOf(pin).length() < length ||String.valueOf(pin).length() > length){
						System.out.println("Invalid input, try again:");
						pin = scan.nextInt();
						check = String.valueOf(pin);
						
					}else{
						
						break;
					}
					
				}
				
			}
			
			// converting input into array list
			String number = String.valueOf(pin);
			
			for (int i = 0; i < number.length(); i++) {

				int j = Character.digit(number.charAt(i),10);
				input[i] = j;
				//System.out.println("digit: " + j);
			}
			
			ArrayList<Integer> guess = new ArrayList<Integer>();
			
			for (int i: input) {
	            guess.add(Integer.valueOf(i));
	        }
			
			ArrayList<Integer> result = new ArrayList<Integer>();
			
			//check guess against generated code
			result = (checker(length, code, input));
			//add guess and results to trackers
			pastres.add(result);
			pastguess.add(guess);
			//display guesses and results
			gui(pastres,pastguess, turn);
			//if all positions in guess contain numbers in correct position, then end loop
			for (int i = 0; i < length; i++){

				if (result.get(i) == 2){

					sum++;
					//System.out.println(i);

				}
			}
		}
		
		
		// if loop ended by guess containing numbers in correct position, than player wins
		if(sum == length){
			
			System.out.println("You Win!");
			System.out.println("Press Enter To Continue . . . .");
			enter = scan.nextLine();
			enter = scan.nextLine();
			main(null);

		// if not, player looses
		}else{
			System.out.println("You Lost!");
			System.out.println("The Correct Code Was : " + code);
			System.out.println("Press Enter To Continue . . . .");
			enter = scan.nextLine();
			enter = scan.nextLine();
			main(null);
		}

	}

	//method for generating a random code, based off of selected gamemode
	static void codegen(int mode) {
		// initating scanner and randomzier
		Scanner scan = new Scanner(System.in);
		Random rand = new Random();
		//if selected mode is 2, enter custom mode
		if (mode == 2) {
			
			System.out.println("Custom Mode Setup");  //self explaining code
			System.out.println("Allow duplicate numbers in code?"); 
			System.out.println("1 = No");
			System.out.println("2 = Yes");
			int dupe = scan.nextInt();
			System.out.println("Input Code Length:");
			int length = scan.nextInt();
			// cannot generate code longer than 6 without duplicate numbers (6 length code uses every possible number)
			if (dupe == 1){
				
				while (length > 6){
					
					System.out.println("Cannot enter code longer than 6 while playing with no duplicate numbers");
					System.out.println("Input Code Length:");
					length = scan.nextInt();
				}
				
			}
			System.out.println("Input Number Of Turns");
			int turns = scan.nextInt();

		
			ArrayList<Integer> code = new ArrayList<Integer>();
			ArrayList<Integer> used = new ArrayList<Integer>();
			// generate code with no duplicate numbers
			if (dupe == 1){
				
				for (int i = 0; i < length; i++) {
					
					int num = rand.nextInt(6) + 1;
					
					while (used.indexOf(num) != -1){
						System.out.println("Used");
						num = rand.nextInt(6) + 1;
					
					}
					
					code.add(num);
					
					used.add(num);

				}
			// generate code with duplicate numbers
			}else{
				
				for (int i = 0; i < length; i++) {

					int num = rand.nextInt(6) + 1;
					code.add(rand.nextInt(6) + 1);
				
				}
		
			}
			//start game
			custom(code, length, turns);
		}
		
		//standard game mode, generates code with duplicates and uses default perams
		if (mode == 1) {

			ArrayList<Integer> code = new ArrayList<Integer>();

			for (int i = 0; i < 4; i++) {
				code.add(rand.nextInt(6) + 1);
			//	System.out.println(code);
			}

			custom(code,4,8);

		}
	}

	//Shows rules of mastermind
	static void rules(){
		Scanner scan = new Scanner(System.in);
		@SuppressWarnings("unused")
		String cont;
		System.out.println("--- Rules ---");
		System.out.println("");
		System.out.println("Players must try to guess a randomly generated code within a certain number of attempts.");
		System.out.println("Codes will contain numbers ranging from 1 to 6.");
		System.out.println("");
		System.out.println("Upon guessing, the player will be informed of how many numbers they have guessed correctly,");
		System.out.println("and in the correct position, as well as how many numbers are");
		System.out.println("contained within the code, but were not guessed in the correct position");
		System.out.println("");
		System.out.println("The player looses if they do not guess the correct code within a certain number of turns");
		System.out.println("The player wins if they correctly guess the code before they run out of turns");
		System.out.println("");
		System.out.println("Press Enter To Continue . . . .");
		cont = scan.nextLine();
		
		main(null);
	}
	
	//Main menu
	public static void main(String[] args) {
		
		int mode;

		Scanner scan = new Scanner(System.in);
		//showing player availible options
		System.out.println("Mode");
		System.out.println("1: Standard Mode");
		System.out.println("2: Custom Mode");
		System.out.println("3: Bonus Game"); 
		System.out.println("4: Rules"); 
		System.out.println("5: Help");
		
		//get player choice
		mode = scan.nextInt();
		// if player input is not one of the availible choices, then get input again
		if (mode == 1 || mode == 2 || mode == 3 || mode == 4 || mode == 5) {

		} else {

			while (mode != 1 && mode != 2 && mode != 3 && mode != 4 && mode != 5) {
				System.out.println("Invalid input, please enter again");
				mode = scan.nextInt();
			}
		}
		
		if (mode == 1 || mode == 2 ) {
			codegen(mode);
		}else{
			//if player selects bonus game, display rules of blackjack then start blackjack
			if (mode == 3){
				@SuppressWarnings("unused")
				String cont;
				int retry = 1;
				
				System.out.println("Black Jack");
				System.out.println("Black Jack is a well known casino game where players attempt to get as close to the number");
				System.out.println("21 as possible without going over. Players start with 2 cards, with face cards having a value of");
				System.out.println("10, and aces having a value of 11. Players will be playing against the dealer, who takes their");
				System.out.println("turn after the players. If the dealer gets a higher number than the player (without going over 21),");
				System.out.println("the dealer wins. If the player ends up with a higher number than the dealer, they win. The dealer");
				System.out.println("will not draw extra cards when the reach a value of 17. ");
				System.out.println("");
				System.out.println("Press Enter To Continue. . . .");
				cont = scan.nextLine();
				cont = scan.nextLine();
				
				System.out.println("Controls:");
				System.out.println("1 = Draw another card");
				System.out.println("2 = End Turn");
				System.out.println("");
				
				System.out.println("Press Enter To Start. . . .");
				cont = scan.nextLine();
				
				//if player chooses to play again, restart blackjack
				while (retry == 1){

					turn();
					System.out.println("Enter 1 to retry");
					System.out.println("Enter 2 to return to main menu");
					retry=scan.nextInt();
					
				}
				//when player decides to stop playing blackjack, return to main menu
				main(null);
				
			}else{
			
			if (mode == 4){
				rules();
			}else{
				
				help();
				
			}
		
			}
		
		}
	
	
	
	}

}
